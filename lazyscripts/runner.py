#!/usr/bin/env python
# -*- encoding=utf8 -*-
#
# Copyright Â© 2009 Hsin Yi Chen
#
# Lazyscripts is a free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this software; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA 02111-1307 USA
"""Handles Script Installation/Remove
"""

import commands
import os
import platform
import shutil

from lazyscripts import env
from lazyscripts.pkgmgr import get_pkgmgr
from lazyscripts.utils import create_executablefile

#{{{def find_pkginfo(scripts, distro):
def find_pkginfo(scripts, distro):
    """get packages defined in scripts by spefic distro.

    @param list scripts
    @param str distro
    @return tuple (install_pkgs_list, remove_pkgs_list)
    """
    paths = [script.path for script in scripts]

    def cmd(action):
        return "find %s -name %s.txt | \
                grep -e '/%s/%s.txt' | \
                xargs cat" % \
                           (" ".join(paths),
                            action,
                            distro.lower(),
                            action)

    installpkgs =  commands.getoutput(cmd("install")).replace('\n',' ')
    removepkgs =  commands.getoutput(cmd("remove")).replace('\n',' ')
    sources = commands.getoutput(cmd("sources"))
    del(cmd)
    return (installpkgs,removepkgs, sources)
#}}}

class ScriptsRunner(object):
    #{{{desc
    """ScriptsRunner - excute scripts.
    """
    #}}}

    #{{{attrs
    "A directory for caching objects are generated by running lazyscript"
    runtime_dir = env.DEFAULT_RUNTIME_ROOT_DIR

    LOG_DIR = env.resource_name('log')

    "A file which defines all commands we will excute in shell."
    TASKSCRIPT_FILE = 'lzs_taskscript'
    #}}}

    #{{{def __init__(self, ui=None):
    def __init__(self, ui=None):
        self.distro = platform.dist()
        self.ui = ui
        self._unprocess_scripts = []
        self.cmd_queue = []
        self.pkgmgr = get_pkgmgr(self.distro[0])
    #}}}

    #{{{def set_scripts(self, scripts):
    def set_scripts(self, scripts):
        """
        set scripts which we want to excute.

        @param list scripts the scripts list from upper layer.
        """
        #FIXME: check scripts list is valide.
        self.cmd_queue = []
        self._unprocess_scripts = scripts
    #}}}

    #{{{def prepare_cmds(self):
    def prepare_cmds(self):
        "prepare commands."
        (self.install_pkgs, self.remove_pkgs, self.sources) = \
                    find_pkginfo(
                        self._unprocess_scripts,
                        self.distro[0])

        if self.remove_pkgs or self.install_pkgs:
            self.cmd_queue.append(self.pkgmgr.make_cmd('update'))
        if self.remove_pkgs:
            self.cmd_queue.append(self.pkgmgr.make_cmd('remove',
                                            self.remove_pkgs))
        if self.install_pkgs:
            self.cmd_queue.append(self.pkgmgr.make_cmd('install',
                                            self.install_pkgs))

        for script in self._unprocess_scripts:
            scriptfile = os.path.join(script.path, 'script')
            if not os.path.exists(scriptfile):    continue
            self.cmd_queue.append("cd %s && ./script" % script.path)
    #}}}

    #{{{def run(self, run_as_root=False):
    def run(self, run_as_root=False):
        self.build_taskscript(run_as_root)
        cmd = os.path.join(self.runtime_dir, 'lzs_taskscript')

        if not self.ui:
            os.system(cmd)
        else:
            self.ui.pid = self.ui.final_page.term.fork_command(cmd)
    #}}}

    #{{{def build_taskscript(self, run_as_root=False):
    def build_taskscript(self, run_as_root=False):
        """
        Excuting scripts.

        @param boolean run_as_root get root permission to excute script.
        """
        self.cmd_queue = []
        self.prepare_cmds()

        if run_as_root:
            if self.sources:
                self.pkgmgr.create_sourceslist(self.sources, \
                            os.path.join(self.runtime_dir,
                                         'lazyscripts.list'))
                self.cmd_queue.insert(0, self.pkgmgr.cmd_add_sourceslist( \
                                    os.path.join(self.runtime_dir,
                                    'lazyscripts.list')))
            self.cmd_queue.insert(0, 'source %s'% \
                                    os.path.join(self.runtime_dir,
                                    env.DEFAULT_STORAGED_ENV_FILE))

            self.cmd_queue.append('chown -R $REAL_USER:$REAL_HOME &> /dev/null')

        self.cmd_queue.insert(0, '#!/bin/bash')

        create_executablefile(
                        os.path.join(self.runtime_dir, self.TASKSCRIPT_FILE),
                        self.cmd_queue)
        shutil.copy(os.path.join(self.runtime_dir,self.TASKSCRIPT_FILE),
             os.path.join(self.LOG_DIR,self.TASKSCRIPT_FILE+'.bak'))
    #}}}
pass
